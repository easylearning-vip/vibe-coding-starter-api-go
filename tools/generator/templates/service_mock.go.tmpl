// Mock{{.Model}}Service {{.Model}}服务模拟
type Mock{{.Model}}Service struct {
	mock.Mock
}

func (m *Mock{{.Model}}Service) Create(ctx context.Context, req *service.Create{{.Model}}Request) (*model.{{.Model}}, error) {
	args := m.Called(ctx, req)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*model.{{.Model}}), args.Error(1)
}

func (m *Mock{{.Model}}Service) GetByID(ctx context.Context, id uint) (*model.{{.Model}}, error) {
	args := m.Called(ctx, id)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*model.{{.Model}}), args.Error(1)
}

func (m *Mock{{.Model}}Service) Update(ctx context.Context, id uint, req *service.Update{{.Model}}Request) (*model.{{.Model}}, error) {
	args := m.Called(ctx, id, req)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*model.{{.Model}}), args.Error(1)
}

func (m *Mock{{.Model}}Service) Delete(ctx context.Context, id uint) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *Mock{{.Model}}Service) List(ctx context.Context, opts *service.List{{.Model}}Options) ([]*model.{{.Model}}, int64, error) {
	args := m.Called(ctx, opts)
	if args.Get(0) == nil {
		return nil, args.Get(1).(int64), args.Error(2)
	}
	return args.Get(0).([]*model.{{.Model}}), args.Get(1).(int64), args.Error(2)
}
