import React, { useEffect, useState } from 'react';
import {
  Button,
  Card,
  Col,
  DatePicker,
  Form,
  Input,
  InputNumber,
  Modal,
  message,
  Popconfirm,
  Row,
  Space,
  Switch,
  Table
} from 'antd';
import { DeleteOutlined, EditOutlined, PlusOutlined, ReloadOutlined, SearchOutlined } from '@ant-design/icons';
import { PageContainer } from '@ant-design/pro-components';
import { useIntl } from '@umijs/max';
import type { ColumnsType } from 'antd/es/table';
import {
  create{{.Model}},
  delete{{.Model}},
  get{{.Model}}List,
  update{{.Model}},
} from '@/services/{{.ModuleName}}/api';

type {{.Model}} = {{.Model}}API.{{.Model}};

const {{.Model}}Management: React.FC = () => {
  const intl = useIntl();
  const [{{.ModelCamel}}s, set{{.Model}}s] = useState<{{.Model}}[]>([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editing{{.Model}}, setEditing{{.Model}}] = useState<{{.Model}} | null>(null);
  const [form] = Form.useForm();
  const [searchForm] = Form.useForm();

  // 分页和查询状态
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0,
  });

  const [searchParams, setSearchParams] = useState({
{{- range .SearchFields}}
    {{.JSONName}}: '',
{{- end}}
    start_date: '',
    end_date: '',
  });

  const [sorter, setSorter] = useState({
    field: 'created_at',
    order: 'descend' as 'ascend' | 'descend',
  });

  const columns: ColumnsType<{{.Model}}> = [
{{- range .FrontendFields}}
{{- if .TableShow}}
    {
      title: intl.formatMessage({ id: 'pages.{{$.ModelCamel}}.table.{{.JSONName}}' }),
      dataIndex: '{{.JSONName}}',
      key: '{{.JSONName}}',
{{- if eq .JSONName "id"}}
      width: 80,
      fixed: 'left',
{{- else if eq .TSType "string"}}
      width: 150,
      ellipsis: {
        showTitle: false,
      },
      render: ({{.JSONName}}: string) => <span title={ {{.JSONName}} }>{ {{.JSONName}} }</span>,
{{- else if eq .TSType "number"}}
      width: 100,
      align: 'right',
{{- else if eq .TSType "boolean"}}
      width: 100,
      align: 'center',
      render: ({{.JSONName}}: boolean) => (
        <Switch checked={ {{.JSONName}} } disabled />
      ),
{{- end}}
{{- if or (eq .Type "time.Time") (eq .JSONName "created_at") (eq .JSONName "updated_at")}}
      width: 150,
      sorter: true,
      render: (date: string) => new Date(date).toLocaleDateString(),
{{- else if eq .TSType "number"}}
      sorter: true,
{{- else if eq .TSType "string"}}
      sorter: true,
{{- end}}
    },
{{- end}}
{{- end}}
    {
      title: intl.formatMessage({ id: 'pages.common.actions' }),
      key: 'action',
      width: 150,
      fixed: 'right',
      render: (_: any, record: {{.Model}}) => (
        <Space>
          <Button
            type="link"
            size="small"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          >
            {intl.formatMessage({ id: 'pages.common.edit' })}
          </Button>
          <Popconfirm
            title={intl.formatMessage({ id: 'pages.common.deleteConfirm' })}
            onConfirm={() => handleDelete(record.id)}
            okText={intl.formatMessage({ id: 'pages.common.yes' })}
            cancelText={intl.formatMessage({ id: 'pages.common.no' })}
          >
            <Button
              type="link"
              size="small"
              danger
              icon={<DeleteOutlined />}
            >
              {intl.formatMessage({ id: 'pages.common.delete' })}
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  // 获取{{.Model}}列表
  const fetch{{.Model}}s = async (params?: any) => {
    setLoading(true);
    try {
      const response = await get{{.Model}}List({
        page: pagination.current,
        pageSize: pagination.pageSize,
        ...searchParams,
        ...params,
      });

      if (response.success) {
        set{{.Model}}s(response.data.items || []);
        setPagination((prev) => ({
          ...prev,
          total: response.data.total || 0,
          current: params?.page || prev.current,
          pageSize: params?.pageSize || prev.pageSize,
        }));
      } else {
        message.error(response.message || '获取数据失败');
      }
    } catch (error) {
      console.error('获取{{.Model}}列表失败:', error);
      message.error('获取数据失败');
    } finally {
      setLoading(false);
    }
  };

  // 删除{{.Model}}
  const handleDelete = async (id: number) => {
    try {
      const response = await delete{{.Model}}(id);
      if (response.success) {
        message.success('删除成功');
        fetch{{.Model}}s();
      } else {
        message.error(response.message || '删除失败');
      }
    } catch (error) {
      console.error('删除失败:', error);
      message.error('删除失败');
    }
  };

  // 编辑{{.Model}}
  const handleEdit = ({{.ModelCamel}}: {{.Model}}) => {
    setEditing{{.Model}}({{.ModelCamel}});
    form.setFieldsValue({{.ModelCamel}});
    setModalVisible(true);
  };

  // 新增{{.Model}}
  const handleAdd = () => {
    setEditing{{.Model}}(null);
    form.resetFields();
    setModalVisible(true);
  };

  // 保存{{.Model}}
  const handleSave = async (values: any) => {
    try {
      let response;
      if (editing{{.Model}}) {
        response = await update{{.Model}}(editing{{.Model}}.id, values);
        message.success('更新成功');
      } else {
        response = await create{{.Model}}(values);
        message.success('创建成功');
      }
      
      setModalVisible(false);
      fetch{{.Model}}s();
    } catch (error) {
      console.error('保存失败:', error);
      message.error('保存失败');
    }
  };

  // 搜索处理
  const handleSearch = (values: any) => {
    const newSearchParams = {
{{- range .SearchFields}}
      {{.JSONName}}: values.{{.JSONName}} || '',
{{- end}}
      start_date: values.date_range?.[0]?.format('YYYY-MM-DD') || '',
      end_date: values.date_range?.[1]?.format('YYYY-MM-DD') || '',
    };
    setSearchParams(newSearchParams);
    setPagination((prev) => ({ ...prev, current: 1 }));
    fetch{{.Model}}s({
      page: 1,
      ...newSearchParams,
    });
  };

  // 重置搜索
  const handleReset = () => {
    const resetParams = {
{{- range .SearchFields}}
      {{.JSONName}}: '',
{{- end}}
      start_date: '',
      end_date: '',
    };
    setSearchParams(resetParams);
    setPagination((prev) => ({ ...prev, current: 1 }));
    searchForm.resetFields();
    fetch{{.Model}}s({
      page: 1,
      ...resetParams,
    });
  };

  // 表格变化处理（分页、排序）
  const handleTableChange = (
    paginationConfig: any,
    _filters: any,
    sorterConfig: any,
  ) => {
    const newSorter = {
      field: sorterConfig.field || 'created_at',
      order: sorterConfig.order || 'descend',
    };
    setSorter(newSorter);

    fetch{{.Model}}s({
      page: paginationConfig.current,
      pageSize: paginationConfig.pageSize,
      sort: newSorter.field,
      order: newSorter.order === 'descend' ? 'desc' : 'asc',
    });
  };

  useEffect(() => {
    fetch{{.Model}}s();
  }, []);

  const buttonStyle = { marginBottom: 16 };

  return (
    <PageContainer
      title={intl.formatMessage({ id: 'pages.{{.ModelCamel}}.title' })}
      content={intl.formatMessage({ id: 'pages.{{.ModelCamel}}.subTitle' })}
    >
      <Card>
        {/* 搜索表单 */}
        <Form
          form={searchForm}
          layout="inline"
          onFinish={handleSearch}
          style={ { marginBottom: 16 } }
        >
          <Row gutter={[16, 16]} style={ { width: '100%' } }>
{{- $searchFieldCount := len .SearchFields}}
{{- if gt $searchFieldCount 0}}
{{- range $index, $field := .SearchFields}}
            <Col span={8}>
              <Form.Item
                name="{{$field.JSONName}}"
                label={intl.formatMessage({ id: 'pages.{{$.ModelCamel}}.table.{{$field.JSONName}}' })}
              >
{{- if eq $field.TSType "string"}}
                <Input
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{$field.JSONName}}.placeholder',
                  })}
                  allowClear
                />
{{- else if eq $field.TSType "number"}}
                <InputNumber
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{$field.JSONName}}.placeholder',
                  })}
                  style={ { width: '100%' } }
                />
{{- end}}
              </Form.Item>
            </Col>
{{- end}}
{{- else}}
            <Col span={8}>
              <Form.Item
                name="search"
                label={intl.formatMessage({ id: 'pages.common.search' })}
              >
                <Input
                  placeholder={intl.formatMessage({
                    id: 'pages.common.search.placeholder',
                  })}
                  allowClear
                />
              </Form.Item>
            </Col>
{{- end}}
            <Col span={8}>
              <Form.Item
                name="date_range"
                label={intl.formatMessage({ id: 'pages.{{.ModelCamel}}.table.createdAt' })}
              >
                <DatePicker.RangePicker
                  placeholder={[
                    intl.formatMessage({ id: 'pages.common.startDate' }),
                    intl.formatMessage({ id: 'pages.common.endDate' }),
                  ]}
                  style={ { width: '100%' } }
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Space>
                <Button
                  type="primary"
                  htmlType="submit"
                  icon={<SearchOutlined />}
                >
                  {intl.formatMessage({ id: 'pages.common.search' })}
                </Button>
                <Button onClick={handleReset} icon={<ReloadOutlined />}>
                  {intl.formatMessage({ id: 'pages.common.reset' })}
                </Button>
              </Space>
            </Col>
          </Row>
        </Form>

        {/* 操作按钮 */}
        <div style={buttonStyle}>
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={handleAdd}
          >
            {intl.formatMessage({ id: 'pages.{{.ModelCamel}}.add' })}
          </Button>
        </div>

        {/* 数据表格 */}
        <Table
          columns={columns}
          dataSource={ {{.ModelCamel}}s }
          loading={loading}
          rowKey="id"
          pagination={ {
            current: pagination.current,
            pageSize: pagination.pageSize,
            total: pagination.total,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              intl.formatMessage(
                { id: 'pages.common.pagination.total' },
                { total, start: range[0], end: range[1] }
              ),
          } }
          onChange={handleTableChange}
          scroll={ { x: 1200 } }
        />
      </Card>

      {/* 新增/编辑模态框 */}
      <Modal
        title={
          editing{{.Model}}
            ? intl.formatMessage({ id: 'pages.{{.ModelCamel}}.edit' })
            : intl.formatMessage({ id: 'pages.{{.ModelCamel}}.add' })
        }
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSave}
        >
          <Row gutter={16}>
{{- range .FrontendFields}}
{{- if .FormShow}}
            <Col span={12}>
              <Form.Item
                name="{{.JSONName}}"
                label={intl.formatMessage({ id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}' })}
{{- if .Required}}
                rules={[
                  {
                    required: true,
                    message: intl.formatMessage({
                      id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}.required',
                    }),
                  },
                ]}
{{- end}}
              >
{{- if eq .FormType "input"}}
                <Input
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}.placeholder',
                  })}
                />
{{- else if eq .FormType "textarea"}}
                <Input.TextArea
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}.placeholder',
                  })}
                  rows={4}
                />
{{- else if eq .FormType "number"}}
                <InputNumber
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}.placeholder',
                  })}
                  style={ { width: '100%' } }
                />
{{- else if eq .FormType "switch"}}
                <Switch />
{{- else if eq .FormType "datetime"}}
                <DatePicker
                  showTime
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}.placeholder',
                  })}
                  style={ { width: '100%' } }
                />
{{- else}}
                <Input
                  placeholder={intl.formatMessage({
                    id: 'pages.{{$.ModelCamel}}.form.{{.JSONName}}.placeholder',
                  })}
                />
{{- end}}
              </Form.Item>
            </Col>
{{- end}}
{{- end}}
          </Row>

          <div style={ { textAlign: 'right', marginTop: 24 } }>
            <Space>
              <Button onClick={() => setModalVisible(false)}>
                {intl.formatMessage({ id: 'pages.common.cancel' })}
              </Button>
              <Button type="primary" htmlType="submit">
                {intl.formatMessage({ id: 'pages.common.ok' })}
              </Button>
            </Space>
          </div>
        </Form>
      </Modal>
    </PageContainer>
  );
};

export default {{.Model}}Management;
